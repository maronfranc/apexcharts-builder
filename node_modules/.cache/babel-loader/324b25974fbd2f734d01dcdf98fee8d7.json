{"ast":null,"code":"import _defineProperty from \"/home/mron/zzz_PASTA_MOVEL/00001_code/00001_GITHUB/apexcharts-test/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport default class ChartFactory {\n  static build(options, series, chartType) {\n    const chartDictionary = {\n      bar: ChartFactory.barChart,\n      pie: ChartFactory.pieChart,\n      stacked: ChartFactory.stackedChart\n    };\n    return chartDictionary[chartType]({\n      options,\n      series\n    });\n  }\n\n  static barChart(chartData) {\n    // return new BarChart(chartData);\n    return {\n      options: chartData.options,\n      series: chartData.series\n    };\n  }\n\n  static stackedChart(chartData) {\n    chartData = ChartFactory.barChart(chartData);\n    chartData.options = _objectSpread({}, chartData.options, {\n      chart: {\n        stacked: true,\n        foreColor: '#111'\n      },\n      colors: [\"#880000\", \"#008800\"],\n      fill: {\n        colors: [\"#990000\", \"#009900\"]\n      }\n    });\n    return {\n      options: chartData.options,\n      series: chartData.series\n    };\n  }\n\n  static pieChart(chartData) {\n    return {\n      options: chartData.options,\n      series: chartData.series\n    };\n  }\n\n}\n\nclass BarChart {\n  constructor(chartData) {\n    this.options = void 0;\n    this.series = void 0;\n    this.options = chartData.options;\n    this.series = chartData.series;\n  }\n\n}","map":{"version":3,"sources":["/home/mron/zzz_PASTA_MOVEL/00001_code/00001_GITHUB/apexcharts-test/src/Components/Charts/ChartFactory.ts"],"names":["ChartFactory","build","options","series","chartType","chartDictionary","bar","barChart","pie","pieChart","stacked","stackedChart","chartData","chart","foreColor","colors","fill","BarChart","constructor"],"mappings":";;;;;;AAOA,eAAe,MAAMA,YAAN,CAAmB;AAChC,SAAcC,KAAd,CACEC,OADF,EAEEC,MAFF,EAGEC,SAHF,EAIE;AACA,UAAMC,eAA2B,GAAG;AAClCC,MAAAA,GAAG,EAAEN,YAAY,CAACO,QADgB;AAElCC,MAAAA,GAAG,EAAER,YAAY,CAACS,QAFgB;AAGlCC,MAAAA,OAAO,EAAEV,YAAY,CAACW;AAHY,KAApC;AAKA,WAAON,eAAe,CAACD,SAAD,CAAf,CAA4B;AAAEF,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAA5B,CAAP;AACD;;AAED,SAAeI,QAAf,CAAwBK,SAAxB,EAA8C;AAC5C;AACA,WAAO;AACLV,MAAAA,OAAO,EAAEU,SAAS,CAACV,OADd;AAELC,MAAAA,MAAM,EAAES,SAAS,CAACT;AAFb,KAAP;AAID;;AAED,SAAeQ,YAAf,CAA4BC,SAA5B,EAAkD;AAChDA,IAAAA,SAAS,GAAGZ,YAAY,CAACO,QAAb,CAAsBK,SAAtB,CAAZ;AACAA,IAAAA,SAAS,CAACV,OAAV,qBACKU,SAAS,CAACV,OADf;AAEEW,MAAAA,KAAK,EAAE;AACLH,QAAAA,OAAO,EAAE,IADJ;AAELI,QAAAA,SAAS,EAAE;AAFN,OAFT;AAMEC,MAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,CANV;AAOEC,MAAAA,IAAI,EAAE;AACJD,QAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AADJ;AAPR;AAWA,WAAO;AACLb,MAAAA,OAAO,EAAEU,SAAS,CAACV,OADd;AAELC,MAAAA,MAAM,EAAES,SAAS,CAACT;AAFb,KAAP;AAID;;AAED,SAAeM,QAAf,CAAwBG,SAAxB,EAA6C;AAC3C,WAAO;AACLV,MAAAA,OAAO,EAAEU,SAAS,CAACV,OADd;AAELC,MAAAA,MAAM,EAAES,SAAS,CAACT;AAFb,KAAP;AAID;;AA9C+B;;AAiDlC,MAAMc,QAAN,CAAe;AAGbC,EAAAA,WAAW,CAACN,SAAD,EAAuB;AAAA,SAF1BV,OAE0B;AAAA,SAD1BC,MAC0B;AAChC,SAAKD,OAAL,GAAeU,SAAS,CAACV,OAAzB;AACA,SAAKC,MAAL,GAAcS,SAAS,CAACT,MAAxB;AACD;;AANY","sourcesContent":["import { PieChart } from \"../../interfaces/PieChart\";\nimport { ChartData } from \"../../interfaces/Charts\";\n\ninterface Dictionary {\n  [index: string]: any;\n}\n\nexport default class ChartFactory {\n  public static build(\n    options: ChartData[\"options\"],\n    series: ChartData[\"series\"],\n    chartType: ChartData[\"chartType\"]\n  ) {\n    const chartDictionary: Dictionary = {\n      bar: ChartFactory.barChart,\n      pie: ChartFactory.pieChart,\n      stacked: ChartFactory.stackedChart\n    };\n    return chartDictionary[chartType!]({ options, series });\n  }\n    \n  private static barChart(chartData: ChartData) {\n    // return new BarChart(chartData);\n    return {\n      options: chartData.options,\n      series: chartData.series,\n    };\n  }\n\n  private static stackedChart(chartData: ChartData) {\n    chartData = ChartFactory.barChart(chartData);\n    chartData.options = {\n      ...chartData.options,\n      chart: {\n        stacked: true,\n        foreColor: '#111',\n      },\n      colors: [\"#880000\", \"#008800\"],\n      fill: {\n        colors: [\"#990000\", \"#009900\",],\n      },\n    }\n    return {\n      options: chartData.options,\n      series: chartData.series,\n    };\n  }\n\n  private static pieChart(chartData: PieChart) {\n    return {\n      options: chartData.options,\n      series: chartData.series,\n    };\n  }\n}\n\nclass BarChart {\n  private options: any;\n  private series: any;\n  constructor(chartData: ChartData) {\n    this.options = chartData.options;\n    this.series = chartData.series;\n  }\n}"]},"metadata":{},"sourceType":"module"}